-- create a procedure that automatically generates the reports
-- To run the procedure, on the first day of the quarter, simply query "call create_reports();"
CREATE OR REPLACE PROCEDURE public.create_reports()
LANGUAGE 'plpgsql'
AS $BODY$
begin

drop table if exists detailed_report;

-- Create the table to insert the data
create table detailed_report (
	
	customer_id int,
	first_name varchar,
	last_name varchar,
	num_rentals int,
	email varchar,
	address varchar,
	address2 varchar,
	city varchar,
	postal_code varchar,
	phone varchar
	
);
insert into detailed_report
select r.customer_id, c.first_name, c.last_name, count(r.customer_id) as number_of_rentals, 
		UPPER(c.email) as email, a.address, a.address2, city.city, a.postal_code, a.phone
from rental r

inner join customer c on r.customer_id = c.customer_id
inner join address a on c.address_id = a.address_id
inner join city on a.city_id = city.city_id

group by r.customer_id, c.first_name, c.last_name, c.email, a.address, a.address2, city.city, a.postal_code, a.phone
order by number_of_rentals asc
limit 25;

drop table if exists summary_report;
create table summary_report (
	full_name varchar,
	email varchar
);

insert into summary_report
select concat(first_name, ' ', last_name) as full_name, email 
from detailed_report;
commit;
end;
$BODY$;

-- ***************

-- Create the trigger function to update the email on the summary report when the detailed is updated
create or replace function update_email()
	returns trigger 
	as
$BODY$
	begin
		update summary_report
		set email = upper(new.email)
		where email = old.email;
	return new;
	end;
$BODY$
language plpgsql

-- Create the report
call create_reports();

-- Create the trigger
create or replace trigger email_updater
before update
on detailed_report
for each row
execute procedure update_email();



-- manually update an email on the detailed report
update detailed_report
set email = 'salesci@wgu.edu'
where customer_id = 318;

